//PERFORMING OPERATION ON DOUBLY LINKEDLIST
#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node* prev;
    Node(int value){
        data=value;
        prev=next=NULL;
    }
};
class DoublyList{
    public:
    Node* head;
    Node* tail;
    DoublyList(){
        head=tail=NULL;
    }
    void push_front(int val){
        Node* NewNode= new Node(val);//dynamic creation of node
        if(head==NULL){//linked list is empty
            head=tail=NewNode;
        }
        else{
            NewNode->next=head;
            head->prev=NewNode;
            head=NewNode;
        }
    }
    void push_back(int value){
        Node* newnode= new Node(value);
        if(head==NULL){
            head=tail=NULL;
        }
        else{
            newnode->prev=tail;
            tail->next=newnode;
            tail=newnode;
        }
    }
    void pop_front(){
        if(head==NULL){
         cout<<"linked list is empty";
        }
        Node* temp=head;
        head=head->next;
        if(head!=NULL){
            head->prev=NULL;
        }
        temp->next=NULL;
        delete temp;
    }
     void pop_back(){
            if(head==NULL){
                return;
            }
            Node* temp=tail;
            tail=tail->prev;
            if(tail != NULL){
                tail->next=NULL;
            }
            temp->prev=NULL;
            delete temp;
        }
    void printlist(){
        Node* temp=head;
        while(temp!=NULL){
            cout<<temp->data<<"<->";
            temp=temp->next;
        }
        cout<<"NULL\n";
    }
};
int main(){
    DoublyList dbll;
    dbll.push_front(4);
    dbll.push_front(3);
    dbll.push_front(2);
    dbll.push_front(1);
    dbll.push_back(5);
    dbll.pop_front();
    dbll.printlist();
    return 0;
}







