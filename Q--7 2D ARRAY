***********WITHOUT DYNAMIC MEMORY ALLOCATION*******
#include <iostream>
using namespace std;
int main() {
    int rowsA, colsA, rowsB, colsB;

    cout << "Enter rows and columns of matrix A: ";
    cin >> rowsA >> colsA;

    cout << "Enter rows and columns of matrix B: ";
    cin >> rowsB >> colsB;

    // Check if multiplication is possible
    if (colsA != rowsB) {
        cout << "Matrix multiplication not possible"<<endl;
        return 0;
    }

    int A[50][50], B[50][50], result[50][50]; // not dynamic memory allocation fixing max size

    cout << "Enter elements of matrix A:" << endl;
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsA; j++) {
            cin >> A[i][j];
        }
    }

    cout << "Enter elements of matrix B:" << endl;
    for (int i = 0; i < rowsB; i++) {
        for (int j = 0; j < colsB; j++) {
            cin >> B[i][j];
        }
    }

    // Initialize result matrix with 0
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            result[i][j] = 0;                ///WE HAVE TO INTIALISE THE RESULTANT MATRIX EVERYTIME TO 0 BECAUSE IF WE MULTIPLY FOR SECOND TIME THE RESULT WE GET WOULD BE DOUBLE TRIPLR FOR THIRD
        }                                    //WE HAVE TO RESET THE VALUE OF RESULTANT INSIDE THE MATRIX MULTIPLICATION FOR SECOND RUN BECAUSE FIRST RUN RESULT HAVE SOME VALUE
    }

    // Matrix multiplication
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            for (int k = 0; k < colsA; k++) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    cout << "Result of multiplication:" << endl;
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
