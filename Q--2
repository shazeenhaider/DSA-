REVERSING THE ARRAY IN PAIRS
#include <iostream>
using namespace std;

int main(){
    int key;
    int arr[5]={1,2,3,6,5};
    int n=5;
    cout<<"enter the size of group"<<endl;
    cin>>key;
    for(int i=0; i<n; i=i+key){
        int start=i;
        int end= i+key-1;//starting from 0 thats why subtract 1
        if(end>=n){
            end=n-1;//reasign out of array size
        }
        for(int j=0; j<(end-start+1)/2; j++){//end-start+1/2 represent no. of time swap work
        swap(arr[start+j],arr[end-j]);
        // end-start+1 represent the no. element in group
        }
    }
    cout<<"reversed array in group"<<endl;
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}
*************INSTEAD OF END-START+1 WE ALREADY KNOW THE GROUP SIZE BUT SPECIFY FOR LAST GROUP**************************
OPTIMIZATION
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {1, 2, 3, 6, 5};
    int n = 5;
    int key;

    cout << "Enter group size: ";
    cin >> key;

    for (int i = 0; i < n; i += key) {
        int start = i;
        int end = i + key - 1;

        if (end < n) {
            //  Full group: use key/2 for fixed swap count
            for (int j = 0; j < key / 2; j++) {
                swap(arr[start + j], arr[end - j]);
            }
        } else {
            //  Last incomplete group: calculate actual group size
            end = n - 1;
            int actual_size = end - start + 1;

            for (int j = 0; j < actual_size / 2; j++) {
                swap(arr[start + j], arr[end - j]);
            }
        }
    }

    // Output result
    cout << "Array after reversing in groups: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }

    return 0;
}
***********DIFFERENT APPROACH*************
#include <iostream>
using namespace std;

void reverseGroup(int arr[], int start, int end) {
    while(start < end) {
        swap(arr[start], arr[end]);
        start++;
        end--;
    }
}

int main(){
    int key;
    int arr[5] = {1, 2, 3, 6, 5};
    int n = 5;

    cout << "Enter the key or number of elements in each group to reverse:" << endl;
    cin >> key;

    for(int i = 0; i < n; i += key){
        int start = i;
        int end = min(i + key - 1, n - 1); // Handle last group if less than 'key' elements
        reverseGroup(arr, start, end);
    }

    cout << "Array after reversing in groups of " << key << ":\n";
    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}







